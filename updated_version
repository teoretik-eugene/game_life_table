<!DOCTYPE html>
<html>
    <head>
        <title>Zhizn</title>
        <meta charset="UTF-8">
        <style>
            .input1{
                width: 200px;
                height: 30px;
            }
            
            table{border: 0.5px solid black; border-spacing: 0.7px; margin:auto;}
            
            .checked{
                background-color: #6ab04c;
                border: 0.5px solid black ;  height: 10px; width: 10px;
            }
            .unchecked{
                background-color: #dfe6e9;
                border: 0.5px solid black ;  height: 10px; width: 10px;
            }
            .start_button{
                background-color: #44bd32;
                color: #f5f6fa;
            }
            .stop_button{
                background-color: #EA2027;
                color: #f5f6fa;
            }
            .quantity{
                position: relative;
                left:200px;
            }
            .name{
                position: relative;
                display: flex;
                font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
            }
           
        </style>
    </head>
    <body>
        <h1 style="text-align: center;">Игра "Жизнь"</h1>
        <!--Важно вбить стиль таблицы table и стиль для td "unchecked", иначе она не отобразится -->
        <span>Введите количество рядов и столбцов:</span>
        <h6>Рекомендованные значения: 50X50 // 100X100 или любые квадратные значения</h6>
        <!--Вбиваем значения для игрового поля-->
        <form name="board">
            <!--Это "форма заполнения"-->
            <input class="input1" type="text" name="row" value="50" placeholder="размер по Оx/строки">
            <span style="left: 200px; position: relative;">Введите количсетво живых клеток для случайной генерации:</span>
            <input class="input1 quantity" type="text" name="quantity" placeholder="Количетсво живых клеток" value="">  
            <br><br>
            <input class="input1" type="text" name="col" value="50" placeholder="размер по Оy/столбцы">            <!--Нужно убрать из value значение "50"-->          
            <br><br>
            <input type="button" id="btn1" value="Построить поле">
            <input type="button" id="random" value="Рандомизировать">
            <input type="button" id="shag" value="Пошаговый запуск">
            <input type="button" class="start_button" id="start" value="Запустить">
            <input type="button" class="stop_button" id="stop" value="Остановить">
            <br><br>
            <input type="button" id="clean" value="Очистить поле">
            <span class="name">by Поляков Евгений</span>
            <br>
            <span>Version 2.0</span>
            <br><br><br>
        </form>
        <script>
            var quantity = 0;                   // Количество живых клеток
            var timer;                          // Переменная для получения id setInterval, служит для останавливания игры
// Сделаем условные обозначения: "координата клетки" - представляем игровое поле как матрицу и коориданата - это элемент матрицы(т.е. строчка-столбец)


            function clicker(event){                            // Ф-ция, которая проверяет на "кликнутый" элемент, и если это td, то меняет класс
                if(event.target.tagName === "TD"){               // Если кликнутый элемент - td, то срабатывает замена класса. написано капсом, потому что так работает tagName, я не знаю почему :/
                    event.target.classList.toggle("checked");
                    event.target.classList.toggle("unchecked");
                    
                }

                if(event.target.classList.contains("checked")){        //Если клетку закрашиваем, то элементу массива присваивается значение true
                    let od = event.target.id;                           // Получаем id клетки, на которую кликнули
                    var n; var m; var str;

                    str=od.split(' ');                                  // Разделяем полученную строку 
                    n=str[0];                                           // Получаем эти координаты
                    m=str[1];

                    table[parseInt(n)][parseInt(m)]=true;               //Преобразовываем в числа и вписываем в элемент матрицы
                    //alert(table[parseInt(n)][parseInt(m)]);

                }

                if(event.target.classList.contains("unchecked")){       //Если клетку "открашиваем", то элементу массива присваиваем значение false
                    let od = event.target.id;
                    var n; var m; var str;

                    str=od.split(' ');                                  // Разделяем id, пробел в id нужен для упрощения разделения
                    n=str[0];
                    m=str[1];

                    table[parseInt(n)][parseInt(m)]=false;              // Присваиваем элементу массива с координатой клетки значение false
                    //alert(table[parseInt(n)][parseInt(m)]);             // Проверка. Выводим значение массива, с координатой клетки, на которую тыкнули
                }
            }


            var form = document.forms.board;                    // Получаем форму заполнения 
            var row1 = board.row;                               // получаем input 
            var col1 = board.col;
            var qua = board.quantity;                           // Получаем input с начальным кол-вом живых клеток

            var row2 = parseInt(row1.value);                     // Получаем введенные значения и переводим из строк в числа
            var col2 = parseInt(col1.value);                    // Эти значения используются в качестве параметров в вызове ф-ции createGameBoard
            
            var table = [];                             //table- двумерный "динамичный" массив, который заполняем "начальным" положением жизни// объявлен вне функции createGameBoard, т.к. массив глобальный

            var new_table = [];                         // Нам понадобится второй массив, который будем заполнять "конечным" положением жизни (конечный в рамке функции)



            function createGameBoard(parentElem,row,col){  //Функция по созданию игрового поля, реализованная через таблицу
                
                parentElem = parentElem || document.body; //                    !
                col = parseInt(row1.value) || 10;                       //Везде row  и col являются строками и столбцами соответственно 
                row = parseInt(col1.value) || 10;

                
                var board = document.createElement('table');
                board.addEventListener("click", clicker);   // Добавляем "подслушку", которая отслеживает клики в этой таблице "board"
                board.id="board1";
                
                for (let i=0; i<row; i++){                  // Добавляем строки
                    var tr = document.createElement('tr');
                    table[i]=[];                            // Создаем строки двумерного массива

                    new_table[i]=[];


                    for (let j=0; j<col; j++){              // Добавляем столбцы
                        var td = document.createElement('td');
                        table[i][j]=false; 

                        new_table[i][j]=false;                      // Второй массив который мы просто заполняем

                        td.id=(String(i) +" "+ String(j));           // Присваиваем id каждому элементу таблицы и получается, что как будто матрица
                                                                    
                        td.className="unchecked";           //обязательно нужно присвоить td класс

                        tr.appendChild(td);                 // Эти appendChild определяют положения, обязательны
                    }
                    board.appendChild(tr);

                }
                parentElem.appendChild(board);

                //document.getElementById('0 0').onclick=function() {alert("попал")}; // Проверка на идентификатор, обязательно чтобы стояло после parentElem.appendChild(board)
                // проверка для себя
            }
            var td1 = document.getElementsByTagName('td');

            document.getElementById('btn1').onclick = function(){               // Вызов анонимной ф-ции, которая удаляет старую игровую таблицу и создает новую
                var checkBoard = document.getElementById("board1"); 
                if(checkBoard!=null){checkBoard.remove()};                      // Проверяет, есть ли предыдущая таблица и если есть, то удаляет её
                createGameBoard(document.body,row2,col2);                   // Вызов функции по созданию таблицы
                }



            document.getElementById('shag').onclick = life;          // При нажатии на кнопку "шаг" функция выполняется один раз.
                

            function life(){                          // Функция по реализации "Жизни"
                row=parseInt(row1.value);                   // Вспоминаем наши введенные строчки и столбцы и присваиваем их в row и col соответственно 
                col=parseInt(col1.value);
                // Важно понимать, что row - количество столбцов, а row-1 - номер последней строчки. Аналогично с col

                for(let i=0; i<row; i++){                       // Цикл для присванивания во второй массив "первоначальной" жизни

                    for (let j=0; j<col; j++){

                        new_table[i][j]=table[i][j];            // Запишем в новый массив значения "введенного" массива(в котором мы пометили закрашенные клетки)
                    }
                }
                                               
                // Цикл для прохода по клеткам и выполнению правил
                for(let i=0; i<row; i++){

                    for(let j=0; j<col; j++){
                        let neighbor = 0;               // Счетчик соседей
                    
                        //Подъехала основная функция этой игры

                        if((i-1)>=0 && (i+1)<=row-1){                         // Ошибка также была в том, что должно было быть <=row-1, а было строго меньше. Поэтому и выполнялись ошибки
                        // Дело в том, что если функция рассматривает строчку "-1" в цикле, т.е. i=0 - 1, то программа выдает ошибку и перестает работать.
                        // Для ее предотвращения я рассматриваю строки в интервале от 1 до предпоследней строчки, нулевую строчку и последнюю строчку.

                            //Случай, когда рассматриваемая строка ни нулевая и ни последняя:
                            if(table[i-1][j-1]==true){neighbor=neighbor+1;};
                            if(table[i-1][j-1]==undefined){if(table[i-1][col-1]==true){neighbor=neighbor+1;};};
                            if(table[i-1][j]==true){neighbor=neighbor+1};
                            if(table[i-1][j+1]==true){neighbor=neighbor+1};
                            if(table[i-1][j+1]==undefined){if(table[i-1][0]==true){neighbor=neighbor+1};};
                            if(table[i][j-1]==true){neighbor=neighbor+1;};
                            if(table[i][j-1]==undefined){if(table[i][col-1]==true){neighbor=neighbor+1;};};
                            // Условие if(table[i][j]==) не трогаем, т.к это рассматриваемый элемент в цикле
                            if(table[i][j+1]==true){neighbor=neighbor+1};
                            if(table[i][j+1]==undefined){if(table[i][0]==true){neighbor=neighbor+1;};};
                            if(table[i+1][j-1]==true){neighbor=neighbor+1;};
                            if(table[i+1][j-1]==undefined){if(table[i+1][col-1]==true){neighbor=neighbor+1;};};
                            if(table[i+1][j]==true){neighbor=neighbor+1;};
                            if(table[i+1][j+1]==true){neighbor=neighbor+1;};
                            if(table[i+1][j+1]==undefined){if(table[i+1][0]==true){neighbor=neighbor+1;};};
                        }
                        if((i==0)){                     // Крайние строки являются исключениями, их надо проеврить отдельно, чтобы не появлялась ошибка при запуске функции                                               
                            //Случай, когда нулевая строка:
                           if(table[row-1][j-1]==true){neighbor=neighbor+1;};           //row-1 - номер последней строки
                           if(table[row-1][j-1]==undefined){if(table[row-1][col-1]==true){neighbor=neighbor+1;};};
                           if(table[row-1][j]==true){neighbor=neighbor+1;};
                           if(table[row-1][j+1]==true){neighbor=neighbor+1;};
                           if(table[row-1][j+1]==undefined){if(table[row-1][0]==true){neighbor=neighbor+1;};};
                           if(table[i][j-1]==true){neighbor=neighbor+1;};
                           if(table[i][j-1]==undefined){if(table[i][col-1]==true){neighbor=neighbor+1;};};              // В этих куча if'ов мы проверяем соседей
                           if(table[i][j+1]==true){neighbor=neighbor+1;};
                           if(table[i][j+1]==undefined){if(table[i][0]==true){neighbor=neighbor+1;};};
                           if(table[i+1][j-1]==true){neighbor=neighbor+1;};
                           if(table[i+1][j-1]==undefined){if(table[i+1][col-1]==true){neighbor=neighbor+1;};}; //забыл написать тут true
                           if(table[i+1][j]==true){neighbor=neighbor+1;};
                           if(table[i+1][j+1]==true){neighbor=neighbor+1;};
                           if(table[i+1][j+1]==undefined){if(table[i+1][0]==true){neighbor=neighbor+1;};};          // Ошибка была здесь. Вместо 0 написал j+1, поэтому не получался тор
                        }                                                                                             // точнее, получался не до конца 
                        // Случай, когда последняя строка:
                        if(i==row-1){

                            if(table[0][j-1]==true){neighbor=neighbor+1;};
                            if(table[0][j-1]==undefined){if(table[0][col-1]==true){neighbor=neighbor+1;};};
                            if(table[0][j]==true){neighbor=neighbor+1;};
                            if(table[0][j+1]==true){neighbor=neighbor+1;};
                            if(table[0][j+1]==undefined){if(table[0][0]==true){neighbor=neighbor+1;};};
                            if(table[i][j-1]==true){neighbor=neighbor+1;};                                                 // Конечно, тут много if-ов, но они служат для наглядности
                            if(table[i][j-1]==undefined){if(table[i][col-1]==true){neighbor=neighbor+1;};};                 // каждая строчка показывает какую клетку рассматриваем
                            if(table[i][j+1]==true){neighbor=neighbor+1;};                                          
                            if(table[i][j+1]==undefined){if(table[i][0]==true){neighbor=neighbor+1;};}; 
                            if(table[i-1][j-1]==true){neighbor=neighbor+1;};    //
                            if(table[i-1][j-1]==undefined){if(table[i-1][col-1]==true){neighbor=neighbor+1;};};
                            if(table[i-1][j]==true){neighbor=neighbor+1;};
                            if(table[i-1][j+1]==true){neighbor=neighbor+1;};
                            if(table[i-1][j+1]==undefined){if(table[i-1][0]==true){neighbor=neighbor+1;};};

                        }

                        // Анализ соседей:
                        //if(i==4 && j==0){alert(neighbor);};           //так я проверял кол-во соседей, методом тыка по какому-то элементу
                        if(neighbor>3 && table[i][j]==true){new_table[i][j]=false;};//.              // Если у клетки больше 3-ех соседей, то она умирает. Зписываем это в новый массив,т.к. если
                    // записать в старом, то это вызовет ошибку в правилах
                        if(neighbor<2 && table[i][j]==true){new_table[i][j]=false;};                 // Если у клетки меньше двух соседей, то умирает от одиночества
                        if(neighbor==3 && table[i][j]==false){new_table[i][j]=true;};                 // Если у клетки ровно 3 соседа, то клетка "становится живой"
                        if((neighbor==3 || neighbor==2) && table[i][j]==true){new_table[i][j]=true}//тут
                    }   
                }
                    // Отрисовка поля
                for(let i=0; i<row; i++){
                    for(let j=0; j<col; j++){
                        if(new_table[i][j]==true){
                            let td_check = document.getElementById(String(i)+" "+String(j));        //Опять составляем id путем превращения цифр в строки
                            td_check.classList.remove("unchecked");
                            td_check.classList.add("checked");
                        }
                        if(new_table[i][j]==false){
                            let td_check = document.getElementById(String(i)+" "+String(j));
                            td_check.classList.remove("checked");
                            td_check.classList.add("unchecked");
                        }
                    }
                }
                // Присваиваем "конечное значение" "начальному"
                for(let i=0; i<row; i++){
                    for(let j=0; j<col; j++){
                        table[i][j]=new_table[i][j];
                    }
                }
            }

            document.getElementById("start").onclick=start;                 // Запуск игры автоматически

            function start(){                       // Функция по автоматическому запуску игры
                timer=setInterval(life,100);
                
            }

            document.getElementById("stop").onclick = stop;         // Остановка игры 

            function stop(){
                clearTimeout(timer);
            }

            document.getElementById("random").onclick = randomize;          // Рандомное расставление живых клеток
            var zu;                                             // ^_^

            function randomize(){                                           // Функция по рандомному расставлению
                row = parseInt(row1.value);                                 // Стандартный перевод
                col = parseInt(col1.value);  
                quantity = parseInt(qua.value);
                if(qua.value == ""){alert("Введите количество живых клеток")};
                // Присвоим всем элементам значение false, т.е. незакрашена. То бишь очистим поле
            for(let i=0; i<row; i++){
                for(let j=0; j<col; j++){
                    table[i][j]=false;
                    let td_check = document.getElementById(String(i)+" "+String(j));            // Отрисовка
                    td_check.classList.remove("checked");
                    td_check.classList.add("unchecked");
                }
            }

                    while(quantity>0){
                        let a=Math.floor(Math.random() * (row) + 0);  //Рандомная строчка
                        let b=Math.floor(Math.random() * (col) + 0);  // Рандомный столбец
                        if(table[a][b]==true){                          // Если такой "рандомный элемент" уже был, то цикл считает еще раз,...
                            quantity++;
                        }
                        else{
                            table[a][b]=true;                           // ...иначе: присваиваем "закрашенное" значение
                        }   
                        quantity--;
                    }
                    // Отрисовка 
                    for(let i=0; i<row; i++){
                        for(let j=0; j<col; j++){
                            if(table[i][j]==true){
                            let td_check = document.getElementById(String(i)+" "+String(j));
                            td_check.classList.remove("unchecked");
                            td_check.classList.add("checked");
                        }
                        if(table[i][j]==false){
                            let td_check = document.getElementById(String(i)+" "+String(j));
                            td_check.classList.remove("checked");
                            td_check.classList.add("unchecked");
                        }

                        }
                    }
                }

            document.getElementById("clean").onclick = clean;       //  Очистка поля

            function clean(){                                       // Функция для очистки поля
                row = parseInt(row1.value);
                col = parseInt(col1.value); 
                for(let i=0; i<row; i++){                           // Присваиваем элементам массива значение false и "открашиваем" клетки
                    for(let j=0; j<col; j++){
                        table[i][j]=false;
                        let td_check = document.getElementById(String(i)+" "+String(j));
                        td_check.classList.remove("checked");
                        td_check.classList.add("unchecked");
                    }
                }
                clearTimeout(timer);            // Когда очищаем поле, то игра останавливается 
            }
        
        </script>
    </body>
</html>
